{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","firestore","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","trim","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","index","ChatMessage","key","id","message","isSameUserAsPrevious","ref","onSubmit","value","onChange","target","placeholder","type","disabled","role","aria-label","props","isSentByCurrentUser","messageTime","Date","toMillis","toLocaleTimeString","hour","minute","hour12","renderProfileImage","src","alt","messageClass","title","displayName","App","useAuthState","user","chatHeading","setChatHeading","useEffect","storedHeading","localStorage","getItem","contentEditable","onBlur","newHeading","innerText","setItem","handleHeadingChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.f4caa5a9.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport './App.css';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyB6Qs0v2RRE_1ABpI9kHapjOCdL4QzmrWI\",\n  authDomain: \"floatr-chit-chat.firebaseapp.com\",\n  projectId: \"floatr-chit-chat\",\n  storageBucket: \"floatr-chit-chat.appspot.com\",\n  messagingSenderId: \"15185903267\",\n  appId: \"1:15185903267:web:3f638a16b746bdafe30916\"\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\n\nfunction App() {\n  const [user] = useAuthState(auth);\n  const [chatHeading, setChatHeading] = useState('ChitChat');\n\n  useEffect(() => {\n    const storedHeading = localStorage.getItem('chatHeading');\n    if (storedHeading) {\n      setChatHeading(storedHeading);\n    }\n  }, []);\n\n  const handleHeadingChange = (e) => {\n    const newHeading = e.target.innerText;\n    localStorage.setItem('chatHeading', newHeading);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h2 contentEditable=\"true\" onBlur={(e) => handleHeadingChange(e)}>\n          {chatHeading}\n        </h2>\n        <SignOut />\n      </header>\n\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n    </div>\n  );\n}\n\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n    <>\n      <button className=\"sign-in\" onClick={signInWithGoogle}>Sign in with Google</button>\n    </>\n  )\n\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button className=\"sign-out\" onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\n\n\nfunction ChatRoom() {\n  const dummy = useRef();\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt');\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    if (formValue.trim() === '') {\n      return; // Don't send empty messages\n    }\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL,\n    });\n\n    setFormValue('');\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n  };\n  return (\n    <>\n      <main>\n\n        {messages &&\n          messages.map((msg, index) => (\n            <ChatMessage\n              key={msg.id}\n              message={msg}\n              isSameUserAsPrevious={() => {\n                const isSameUser =\n                  index > 0 && msg.uid === messages[index - 1].uid;\n                return isSameUser;\n              }}\n            />\n          ))}\n        <span ref={dummy}></span>\n      </main>\n\n      <form onSubmit={sendMessage}>\n\n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"Type here\" />\n        <button type=\"submit\" disabled={!formValue.trim()}>\n          <span role=\"img\" aria-label=\"Send message\">\n          </span>\n          Send\n        </button>\n      </form>\n    </>\n  );\n}\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL, createdAt } = props.message;\n  const currentUser = auth.currentUser;\n  const isSentByCurrentUser = uid === currentUser?.uid;\n  const isSameUserAsPrevious = props.isSameUserAsPrevious;\n  const messageTime = createdAt\n    ? new Date(createdAt.toMillis()).toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: 'numeric',\n      hour12: false,\n    })\n    : '';\n  const renderProfileImage = () => {\n    if (!isSentByCurrentUser && (!isSameUserAsPrevious || !isSameUserAsPrevious())) {\n      return (\n        <img\n          src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'}\n          alt=\"\"\n        />\n      );\n    }\n    return null;\n  };\n\n  const messageClass = isSentByCurrentUser ? 'sent' : 'received';\n  return (\n    <>\n      <div className={`message ${messageClass}`}>\n        {renderProfileImage()}\n        <p\n          className={renderProfileImage() === null ? 'with-margin' : ''}\n          title={isSentByCurrentUser ? 'You' : currentUser.displayName}\n        >\n          {text}\n        </p>\n\n      </div>\n      <span className={`message-time-${messageClass}`}>{messageTime}</span>\n    </>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}